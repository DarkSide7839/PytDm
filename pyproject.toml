[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pydm"
version = "1.0.0"
description = "Un gestionnaire de téléchargement moderne avec interface graphique"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Docteur-Parfait", email = "docteur.parfait@example.com"}
]
maintainers = [
    {name = "Docteur-Parfait", email = "docteur.parfait@example.com"}
]
keywords = ["download", "manager", "gui", "tkinter", "python", "http", "files", "progress", "resume", "pause"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: System :: Archiving",
    "Topic :: System :: Networking",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: X11 Applications :: Qt",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X",
]
requires-python = ">=3.7"
dependencies = [
    "requests>=2.31.0",
    "psutil>=5.9.0",
    "urllib3>=2.0.0",
    "validators>=0.22.0",
    "requests-cache>=1.1.0",
    "httpx>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "flake8>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "tox>=4.6.0",
    "coverage>=7.2.0",
    "pytest-benchmark>=4.0.0",
    "pytest-qt>=4.2.0",
    "bump2version>=1.0.0",
    "towncrier>=22.12.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
]

[project.urls]
Homepage = "https://github.com/Docteur-Parfait/pydm"
Documentation = "https://github.com/Docteur-Parfait/pydm#readme"
Repository = "https://github.com/Docteur-Parfait/pydm.git"
"Bug Tracker" = "https://github.com/Docteur-Parfait/pydm/issues"
Changelog = "https://github.com/Docteur-Parfait/pydm/blob/main/CHANGELOG.md"

[project.scripts]
pydm = "download:main"
pydm-gui = "download:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["pydm*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pydm"]
known_third_party = ["requests", "tkinter", "pathlib"]

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tkinter.*",
    "requests.*",
    "urllib3.*",
    "psutil.*",
    "validators.*",
    "httpx.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=download",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests",
    "network: marks tests as requiring network access",
    "download: marks tests as download tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:requests.*",
]

[tool.coverage.run]
source = ["download"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]
